assayProcesses: 多个泳道信息, plate在不同泳道中的节点信息   
variables: 变量信息

逻辑：当判断出现死锁情况时，回溯至上一步，上一步在选择时选择其他选项。如果所有选项都已经选择过，那么则回溯到再上一步，选择再上一步的其他选项。
因此需要记录每一步的选择，以及该步进行选择前的状态。

梳理逻辑:
首先是资源建模的部分，总共有多少个设备，每个设备对应多少个板位资源


job:
1. 定义好输入转化任务图的模块
2. 格式化代码，以类的形式进行封装。

先处理节点任务的设置

先做不是图结构的不包含液体工作站的情况的算法输入的转化，再做包含液体工作站的转化

·总共有两个类型的任务
第一个类型是正常节点的类型任务
第二个类型是转移节点的类型任务
对于每个类型的任务来说，至少需要定义清楚以下内容：
1. 任务之间的拓扑关系：具体来说，定义表达为task.pre 和 task.next 该部分内容后续会使用图结构进行优化
2. 每个任务需要执行的时间：目前暂时不将设备执行时间不同考虑进来。后续将做设备级别的优化
3. 每个任务需要的板位资源：每个任务需要占用的板位需要进行设置。
4. 任务图需要进行复制多少份

我们先得到一个first version后，进行测试，将未来的工作划分成以下几个部分。例如对某些内容的支持逐步实现。
先让算法能够跑起来，然后在此基础上不断进行完善。

现在假设只有一个机械臂设备


记录一下结构体中做的更改：
1. 增加plate_num项，表示每个泳道板子数量


我怎么知道每个工艺节点他占用的position呢，每个设备存在一至多个位置资源和一个工作资源。
对于单板设备来说，其工作资源position的id ：pos+该设备id为位置资源pos的id，work+改设备id为工作资源的id
对于多板设备来说，pos+
问题在于我不知道任务与位置的对应关系。我们在每个节点的json上添加一项，position_occ表示占用的position的id
这样可以解决每个任务占用什么位置资源的问题。


现在对资源的建模完成了，下一步是对任务拓扑关系进行建模，最后对任务占用资源、释放资源进行建模


任务拓扑关系建模：
首先的一个逻辑是：任务图中任务有多少个。怎么样的操作算作一个任务。
一个基本的逻辑是：如果泳道中当前节点是使用的单板设备。则没有执行序列。则当前泳道中的节点算做一个任务。
    如果泳道中当前节点是多板设备。则看多板设备上是否存在执行序列，如果不存在执行序列的话，那么则按单板设备处理算作一个任务。
    如果是液体工作站类型，则拿到液体工作站的工作序列。工作序列里面每一个step都作为一个任务。如果没有生成过任务图的话，则
    生成一个顺序的子任务图。之后连接之前节点和子任务图中对应节点。如果之前生成过任务图的话，那么就连接对应的任务节点后跳过
    该泳道中的节点。
    在出口时判断上一个节点是否是包含序列的节点，如果是则找到对应序列中的任务作为当前的前驱任务。
今天任务首先完成这部分的逻辑的工作。
之后
任务占用资源建模:
    当前任务有两类：一类是节点上的工作任务，另一类是节点之间的转移任务。

资源的建模（完成）、任务拓扑关系建模（正在调试）、任务占用资源建模（待实现）。
三个都建模完成后即可完成对接工作。
解决了上述三种建模后，对接到算法的输入部分。